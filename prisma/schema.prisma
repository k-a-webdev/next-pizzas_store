generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id Int @id @default(autoincrement())

  fullName String
  email    String @unique
  password String

  role UserRole @default(USER)

  provider   String?
  providerId String?

  cart             Cart?
  order            Order[]
  varificationCode VerificationCode?

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Category {
  id Int @id @default(autoincrement())

  name     String    @unique
  products Product[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Product {
  id Int @id @default(autoincrement())

  name     String
  imageUrl String

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  ingridients Ingridient[]

  variants ProductItem[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model ProductItem {
  id Int @id @default(autoincrement())

  price     Int
  size      Int?
  pizzaType Int?

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  cartItem CartItem[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Ingridient {
  id Int @id @default(autoincrement())

  name     String
  price    Int
  imageUrl String
  product  Product[]
  cartItem CartItem[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Cart {
  id Int @id @default(autoincrement())

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @unique

  totalAmount Int @default(0)

  token String?

  cartItem CartItem[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model CartItem {
  id Int @id @default(autoincrement())

  productItem   ProductItem @relation(fields: [productItemId], references: [id])
  productItemId Int

  cart   Cart @relation(fields: [cartId], references: [id])
  cartId Int

  quantity Int

  ingridients Ingridient[]

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Order {
  id Int @id @default(autoincrement())

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @unique

  token String

  totalAmount Int         @default(0)
  status      OrderStatus
  paymentID   String?

  items Json

  fullName String
  email    String?
  address  String
  phone    String
  comment  String?

  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model VerificationCode {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  code      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  SUCCESSED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}

//TO-DO
// - add time for order
